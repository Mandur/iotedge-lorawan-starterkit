on: [push]

jobs:
   # Build and deploy Facade Azure Function 
  deploy_facade_function:
    name: Build and deploy Facade Azure Function   
    runs-on: ubuntu-16.04
    env:
      AZURE_FUNCTIONAPP_NAME: ms-lora-function-app
      AZURE_FUNCTIONAPP_PACKAGE_PATH: 'LoRaEngine/LoraKeysManagerFacade/'

    steps:
       - uses: actions/checkout@v2     
       - name: 'Resolve Project Dependencies Using Dotnet'
         shell: bash
         run: |
           pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
           dotnet build --configuration Release --output ./output
           popd
           
       - name: 'Run Azure Functions Action'
         uses: Azure/functions-action@v1
         id: fa
         with:
           app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
           package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
           publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  # Deploy IoT Edge solution to ARM gateway
  iot_edge_deploy_arm:
    env:
      CONTAINER_REGISTRY_ADDRESS: "myloramikou.azurecr.io"
      CONTAINER_REGISTRY_SERVER: "myloramikou.azurecr.io"
      CONTAINER_REGISTRY_USERNAME: "myloramikou"
      CONTAINER_REGISTRY_PASSWORD: ${{ secrets.ACR_CREDENTIALS }}
      IOTHUB_CONNECTION_STRING: ${{ secrets.IOTHUB_CONNECTION_STRING }}
      DEVICE_CONNECTION_STRING: ${{ secrets.DEVICE_CONNECTION_STRING }}
      IOT_EDGE_DEPLOYMENT_ID: citest
      DEVICE_ID: gateway
      NET_SRV_LOG_LEVEL: 0
      NET_SRV_LOGTO_HUB: true
      NET_SRV_LOGTO_UDP: false
      NET_SRV_IOTEDGE_TIMEOUT: 1000
      NET_SRV_LOG_TO_UDP_ADDRESS: "192.168.1.1"
      EDGEHUB_ROUTE: "FROM /* INTO $upstream"
      RESET_PIN: 7
      REGION: "EU"
      PKT_FWD_SPI_SPEED: 1500
      PKT_FWD_SPI_DEV: 2
      FACADE_SERVER_URL: "https://lora-function-app.azurewebsites.net/api/"
      NET_SRV_VERSION: ${{ github.run_id }}
      FACADE_AUTH_CODE: ${{ secrets.FUNCTION_AUTH_CODE }}
      PKT_FWD_VERSION: ${{ github.run_id }}
    runs-on: ubuntu-latest
    name: Run IoT Edge Deployment on ARM gateway
    steps:  
      - name: Checkout
        uses: actions/checkout@v2

      - name: Iot Edge Push Solution
        uses: ./devops
        id: edgedev_push
        with:
          command: push
          file_path: 'LoRaEngine/deployment.template.json'
          target_platform: 'arm32v7'

      - name: Iot Edge Deploy
        uses: ./devops
        id: edgedev_deploy
        with:
          command: deploy
          file_path: 'LoRaEngine/deployment.template.json'
          target_platform: 'arm32v7'

      - name: Wait for IoT Edge Deployment
        run: |
          az extension add --name azure-cli-iot-ext     
          until `az iot edge deployment show-metric --deployment-id ${{ env.IOT_EDGE_DEPLOYMENT_ID }} --metric-id reportedSuccessfulCount --metric-type system --login '${{ secrets.IOTHUB_CONNECTION_STRING }}' | grep -q ${{ env.DEVICE_ID }}`; do sleep 10 && echo wait; done

# Runs integration tests in dedicated agent, while having modules deployed into PI (arm32v7)
  test_runner_dedicated_agent:
    name: Run tests in dedicated agent
    strategy:
      max-parallel: 1
      matrix:
        # MultiGatewayTests missing
        testsToRun: [MacTest, OTAAJoinTest, ABPTest, OTAATest, MacTest, SensorDecodingTest, ClassCTest, C2DMessageTest]
    needs: 
      - iot_edge_deploy_arm
      - deploy_facade_function
    runs-on: [ self-hosted, x64 ]
    # if: env.RunTestsOnly == 'true'
    timeout-minutes: 60
    env:      
      INTEGRATIONTEST_LeafDeviceSerialPort: '/dev/ttyACM0'
      INTEGRATIONTEST_IoTHubEventHubConsumerGroup: 'reserved_integrationtest_amd'
      INTEGRATIONTEST_LeafDeviceGatewayID: lora-device
      INTEGRATIONTEST_DevicePrefix: '01'
      INTEGRATIONTEST_EnsureHasEventDelayBetweenReadsInSeconds: 15
      INTEGRATIONTEST_EnsureHasEventMaximumTries: 5
      INTEGRATIONTEST_IoTHubConnectionString: ${{ secrets.IOTHUB_CONNECTION_STRING }}
      INTEGRATIONTEST_IoTHubEventHubConnectionString: ${{ secrets.IOTHUB_EVENT_HUB_CONNECTION_STRING }}
      INTEGRATIONTEST_FunctionAppCode: ${{ secrets.FUNCTION_AUTH_CODE }}
      INTEGRATIONTEST_FunctionAppBaseUrl: "https://lora-function-app.azurewebsites.net/api/"
      buildConfiguration: "Release"

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 'Configure test in **/test/LoRaWan.IntegrationTest/appsettings.json' 
      uses: cschleiden/replace-tokens@v1
      with:
        files: '**/test/LoRaWan.IntegrationTest/appsettings.json'
    
    # Runs Integration tests
    - name: Build IntegrationTest
      run: dotnet build --configuration ${{ env.buildConfiguration }} **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj

    - name: Integration testing ${{ matrix.testsToRun }}
      # if: env.IntegrationTestsToRun == '' || contains(env.IntegrationTestsToRun, '${{ matrix.testsToRun }}')
      run: |
        echo ${{ matrix.testsToRun }}
        dotnet test --logger trx --no-build --configuration ${{ env.buildConfiguration }} -p:ParallelizeTestCollections=false --filter "${{ matrix.testsToRun }}" **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj
    
    # Upload test results as artifact
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.testsToRun }}-results
        path: LoRaEngine/test/LoRaWan.IntegrationTest/TestResults


