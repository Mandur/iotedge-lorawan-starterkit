on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - master
      - 'releases/*'

env: 
  RunTestsOnly: true

jobs:
  build_and_test:
    name: Build and Test Solution
    runs-on: ubuntu-16.04
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'RunTestsOnly') }}
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    # build LoRa Engine
    - name: Build LoRa Engine
      run: dotnet build --configuration ${{ env.buildConfiguration }} LoRaEngine/LoRaEngine.sln

    # build C# Samples/DecoderSample
    - name: Build C# Samples/DecoderSample
      run: dotnet build --configuration ${{ env.buildConfiguration }} Samples/DecoderSample 

    # build LoRa Simulator
    - name: Build LoRa Simulator
      run: dotnet build --configuration ${{ env.buildConfiguration }} LoRaEngine/modules/LoRaSimulator/LoRaSimulator.sln

    # Pull Redis Cache docker image
    - name: Pulling Redis Cache image
      run: docker pull redis:5.0.4-alpine

    # Run unit tests
    - name: Run unit tests
      run: |
        mkdir $(Build.SourcesDirectory)\results
        dotnet test --logger trx LoRaEngine/test/LoRaWanNetworkServer.Test/*.csproj -r LoRaEngine/test/TestResults/  &&  dotnet test --logger trx LoRaEngine/modules/LoRaWanNetworkSrvModule/LoRaToolsTest/*.csproj -r LoRaEngine/test/TestResults/ && dotnet test --logger trx LoRaEngine/test/LoraKeysManagerFacade.Test/*.csproj -r LoRaEngine/test/TestResults/
   
    # - run: mkdir -p LoRaEngine/test/TestResults/
   
    # Upload test results as artifact
    - uses: actions/upload-artifact@v1
      with:
        name: unit-test-results
        path: LoRaEngine/test/TestResults
   
    # Find out if full ci is enabled for Pull Request validation
    - name: Check for CI label build on PR
      id: check-label
      run: |
        echo "::set-output name=label::abcde" 
        echo "Looking for label at https://api.github.com/repos/$BUILD_REPOSITORY_ID/issues/$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER/labels"
        if curl -s "https://api.github.com/repos/$BUILD_REPOSITORY_ID/issues/$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER/labels" | grep '"name": "fullci"'
        then
          echo "::set-output name=prWithCILabel::true"       
          echo "fullci label found!"
        fi
      if: github.event_name == 'pull_request'
   
    - name: Check label
      env:
        label: ${{ steps.check-label.outputs.label }}
      run: |
        echo "Label:  " 
        echo ${{ env.label }}
   
  # Build and deploy Facade Azure Function
  deploy_facade_function:
    name: Build and Deploy Facade Azure Function   
    runs-on: ubuntu-16.04
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'RunTestsOnly') }}
    env:
      AZURE_FUNCTIONAPP_NAME: ms-lora-function-app
      AZURE_FUNCTIONAPP_PACKAGE_PATH: 'LoRaEngine/LoraKeysManagerFacade/'

    steps:
       - uses: actions/checkout@v2     
       - name: 'Resolve Project Dependencies Using Dotnet'
         shell: bash
         run: |
           pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
           dotnet build --configuration Release --output ./output
           popd
           
       - name: 'Run Azure Functions Action'
         uses: Azure/functions-action@v1
         id: fa
         with:
           app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
           package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
           publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  # Deploy IoT Edge solution to ARM gateway
  deploy_arm_gw_iot_edge:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'RunTestsOnly') }}
    env:
      CONTAINER_REGISTRY_ADDRESS: "myloramikou.azurecr.io"
      CONTAINER_REGISTRY_SERVER: "myloramikou.azurecr.io"
      CONTAINER_REGISTRY_USERNAME: "myloramikou"
      CONTAINER_REGISTRY_PASSWORD: ${{ secrets.ACR_CREDENTIALS }}
      IOTHUB_CONNECTION_STRING: ${{ secrets.IOTHUB_CONNECTION_STRING }}
      DEVICE_CONNECTION_STRING: ${{ secrets.DEVICE_CONNECTION_STRING }}
      IOT_EDGE_DEPLOYMENT_ID: citest
      DEVICE_ID: gateway
      NET_SRV_LOG_LEVEL: 1
      NET_SRV_LOGTO_HUB: false
      NET_SRV_LOGTO_UDP: true
      NET_SRV_IOTEDGE_TIMEOUT: 0
      NET_SRV_LOG_TO_UDP_ADDRESS: "192.168.0.41"
      EDGEHUB_ROUTE: "FROM /* INTO $upstream"
      RESET_PIN: 7
      REGION: "EU"
      FACADE_SERVER_URL: "https://lora-function-app.azurewebsites.net/api/"
      NET_SRV_VERSION: ${{ github.run_id }}
      FACADE_AUTH_CODE: ${{ secrets.FUNCTION_AUTH_CODE }}
      PKT_FWD_VERSION: ${{ github.run_id }}
      EDGE_AGENT_VERSION: 1.0.6
      EDGE_HUB_VERSION: 1.0.6
      EDGEHUB_OPTIMIZEFORPERFORMANCE: false
      EDGEHUB_MQTTSETTINGS_ENABLED: false
      EDGEHUB_HTTPSETTINGS_ENABLED: false
      BUILD_BUILDID: ${{ github.run_id }}
    runs-on: ubuntu-latest
    name: Run IoT Edge Deployment on ARM gateway
    steps:  
      - name: Checkout
        uses: actions/checkout@v2

      - name: Iot Edge Push Solution
        uses: ./devops
        id: edgedev_push
        with:
          command: push
          folder_path: 'LoRaEngine'
          file_name: 'deployment.test.template.json'
          target_platform: 'arm32v7'

      - name: Iot Edge Deploy
        uses: ./devops
        id: edgedev_deploy
        with:
          command: deploy
          folder_path: 'LoRaEngine'
          file_name: 'deployment.test.template.json'
          target_platform: 'arm32v7'

      - name: Wait for IoT Edge Deployment
        run: |
          az extension add --name azure-cli-iot-ext     
          until `az iot edge deployment show-metric --deployment-id ${{ env.IOT_EDGE_DEPLOYMENT_ID }} --metric-id reportedSuccessfulCount --metric-type system --login '${{ secrets.IOTHUB_CONNECTION_STRING }}' | grep -q ${{ env.DEVICE_ID }}`; do sleep 10 && echo wait; done

# Runs integration tests in dedicated agent, while having modules deployed into PI (arm32v7)
  integration_test_ :
    name: Run tests in dedicated agent
    strategy:
      max-parallel: 1
      matrix:
        # MultiGatewayTests, MacTest missing
        testsToRun: [ OTAAJoinTest, ABPTest, OTAATest, MacTest, SensorDecodingTest, ClassCTest, C2DMessageTest]
    needs: 
      - deploy_arm_gw_iot_edge
      - deploy_facade_function
    runs-on: [ self-hosted, x64 ]
    timeout-minutes: 60
    env:      
      INTEGRATIONTEST_LeafDeviceSerialPort: '/dev/ttyACM0'
      INTEGRATIONTEST_IoTHubEventHubConsumerGroup: 'reserved_integrationtest_amd'
      INTEGRATIONTEST_LeafDeviceGatewayID: gateway
      INTEGRATIONTEST_DevicePrefix: '01'
      INTEGRATIONTEST_EnsureHasEventDelayBetweenReadsInSeconds: 15
      INTEGRATIONTEST_EnsureHasEventMaximumTries: 5
      INTEGRATIONTEST_IoTHubConnectionString: ${{ secrets.IOTHUB_CONNECTION_STRING }}
      INTEGRATIONTEST_IoTHubEventHubConnectionString: ${{ secrets.IOTHUB_EVENT_HUB_CONNECTION_STRING }}
      INTEGRATIONTEST_FunctionAppCode: ${{ secrets.FUNCTION_AUTH_CODE }}
      INTEGRATIONTEST_FunctionAppBaseUrl: "https://lora-function-app.azurewebsites.net/api/"
      buildConfiguration: "Release"

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 'Configure test in **/test/LoRaWan.IntegrationTest/appsettings.json' 
      uses: cschleiden/replace-tokens@v1
      with:
        files: '**/test/LoRaWan.IntegrationTest/appsettings.json'
    
    # Runs Integration tests
    - name: Build IntegrationTest
      run: dotnet build --configuration ${{ env.buildConfiguration }} **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj

    - name: Integration testing ${{ matrix.testsToRun }}
      id: integration_test
      # if: env.IntegrationTestsToRun == '' || contains(env.IntegrationTestsToRun, '${{ matrix.testsToRun }}')
      run: |
        echo ${{ matrix.testsToRun }}
        dotnet test --logger trx --no-build --configuration ${{ env.buildConfiguration }} -p:ParallelizeTestCollections=false --filter "${{ matrix.testsToRun }}" **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj
    
    # Upload test results as artifact
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.testsToRun }}-results
        path: LoRaEngine/test/LoRaWan.IntegrationTest/TestResults

    - uses: LouisBrunner/checks-action@v0.1.0
      if: always()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: "${{ matrix.testsToRun }}"
        conclusion: ${{ job }}
        # output:
        #   summary: 'this is a description'
          #text_description: ${{ steps.test.outputs.description }}


